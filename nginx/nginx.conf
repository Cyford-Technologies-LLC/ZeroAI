events {
    worker_connections 1024;
}

http {
    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=avatar_streaming:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=avatar_api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=zeroai_api:10m rate=20r/s;
    limit_req_zone $binary_remote_addr zone=peer_api:10m rate=15r/s;

    # Upstream backends
    upstream zeroai_backend {
        server zeroai:3939;
    }

    upstream peer_backend {
        server peer:8080;
    }

    upstream avatar_backend {
        server avatar:7860;
    }

    upstream tts_backend {
        server tts-service:5000;
    }

    # Main server block
    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # CORS headers for API endpoints
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";

        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # Avatar WebSocket streaming (highest priority)
        location /avatar/stream/ws {
            proxy_pass http://avatar_backend/stream/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket specific timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            proxy_connect_timeout 30s;

            # Rate limiting for streaming
            limit_req zone=avatar_streaming burst=3 nodelay;
        }

        # Avatar HTTP streaming
        location /avatar/stream {
            proxy_pass http://avatar_backend/stream;
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Streaming timeouts
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 30s;

            # Rate limiting
            limit_req zone=avatar_streaming burst=3 nodelay;
        }

        # Avatar API endpoints
        location /avatar/ {
            rewrite ^/avatar/(.*)$ /$1 break;
            proxy_pass http://avatar_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Longer timeout for video generation
            proxy_read_timeout 1800s;
            proxy_send_timeout 1800s;
            proxy_connect_timeout 30s;

            # Rate limiting
            limit_req zone=avatar_api burst=5 nodelay;
        }

        # Avatar static files (generated videos/images)
        location /avatar/static/ {
            alias /var/www/avatar/static/;
            expires 1h;
            add_header Cache-Control "public, immutable";

            # Handle large video files
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
        }

        # TTS service
        location /tts/ {
            rewrite ^/tts/(.*)$ /$1 break;
            proxy_pass http://tts_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            proxy_connect_timeout 10s;

            # Rate limiting
            limit_req zone=avatar_api burst=10 nodelay;
        }

        # ZeroAI main API
        location /api/ {
            proxy_pass http://zeroai_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 30s;

            # Rate limiting
            limit_req zone=zeroai_api burst=10 nodelay;
        }

        # Peer API
        location /peer/ {
            rewrite ^/peer/(.*)$ /$1 break;
            proxy_pass http://peer_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 30s;

            # Rate limiting
            limit_req zone=peer_api burst=10 nodelay;
        }

        # Health checks (no rate limiting)
        location ~ ^/(health|debug|status) {
            # Try avatar first, then zeroai
            proxy_pass http://avatar_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 30s;
            proxy_send_timeout 30s;
            proxy_connect_timeout 10s;
        }

        # Default route - serve ZeroAI main interface
        location / {
            proxy_pass http://zeroai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 30s;

            # Rate limiting
            limit_req zone=zeroai_api burst=15 nodelay;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Direct avatar access on port 7860 (backward compatibility)
    server {
        listen 7860;
        server_name _;

        # Just proxy everything directly to avatar service
        location / {
            proxy_pass http://avatar_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Handle WebSocket upgrades
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_read_timeout 1800s;
            proxy_send_timeout 1800s;
            proxy_connect_timeout 30s;
        }
    }

    # WebSocket connection upgrade mapping
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Optional HTTPS server (uncomment and configure SSL certificates)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # Include all location blocks from HTTP server
    # }
}