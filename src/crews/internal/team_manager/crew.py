# src/crews/internal/team_manager/crew.py

import importlib
import logging
import traceback
from pathlib import Path
from typing import Any, Dict, List, Optional
from rich.console import Console

from crewai import Crew, Process, Task
from .agents import create_team_manager_agent, ErrorLogger, format_agent_list

console = Console()
error_logger = ErrorLogger()


def get_team_manager_crew(
    router,
    tools: List,
    project_config: Dict[str, Any],
    task_inputs: Dict[str, Any],
    crews_status: Dict[str, Any]  # Add crews_status as a parameter
) -> Optional[Crew]:
    """
    Creates a hierarchical master crew managed by the Team Manager agent.

    Args:
        router: The LLM router instance
        tools: List of tools (passed to worker agents)
        project_config: The project configuration
        task_inputs: Dictionary of task inputs
        crews_status: Preloaded status of all available crews

    Returns:
        A Crew instance configured for hierarchical execution, or None on error.
    """
    try:
        project_id = task_inputs.get("project_id", "default")
        prompt = task_inputs.get("prompt", "")
        working_dir_str = project_config.get("crewai_settings", {}).get(
            "working_directory", f"/tmp/internal_crew/{project_id}/")
        working_dir = Path(working_dir_str)
        working_dir.mkdir(parents=True, exist_ok=True)

        # 1. Instantiate the manager agent
        team_manager = create_team_manager_agent(
            router=router,
            project_id=project_id,
            working_dir=working_dir
        )

        # 2. Instantiate all necessary worker agents dynamically
        worker_agents = []
        for crew_name, info in crews_status.items():
            # Skip the team_manager entry itself
            if crew_name == "team_manager":
                continue

            if info.get("status") == "available" and "agents" in info:
                for func_name in info["agents"]:
                    # Exclude the manager agent creator itself
                    if func_name == "create_team_manager_agent":
                        continue
                    
                    try:
                        agents_module_path = f"src.crews.internal.{crew_name}.agents"
                        agents_module = importlib.import_module(agents_module_path)
                        agent_creator_func = getattr(agents_module, func_name)
                        
                        # Pass the tools here if your agent creation functions expect them
                        worker_agents.append(agent_creator_func(router=router, inputs=task_inputs))
                    except (ImportError, AttributeError) as e:
                        console.print(f"‚ö†Ô∏è Failed to import agent creator {func_name} from {crew_name}: {e}", style="yellow")

        if not worker_agents:
            console.print("‚ùå No worker agents found to form the crew. Delegation will fail.", style="red")
            return None

        console.print(f"üë®‚Äçüíº Assembling hierarchical crew with {len(worker_agents)} worker agents.", style="blue")

        # 3. Create the initial task for the manager to delegate
        initial_task = Task(
            description=f"Analyze and coordinate the following request: {prompt}",
            agent=team_manager,
            expected_output="A full report on the requested topic, generated by the team."
        )

        # 4. Create the crew with the correct process and manager agent
        return Crew(
            agents=worker_agents,  # Pass ALL worker agents here
            manager_agent=team_manager,  # Designate the manager
            tasks=[initial_task],
            process=Process.hierarchical,  # **Crucial for delegation**
            verbose=True
        )

    except Exception as e:
        error_context = {"traceback": traceback.format_exc()}
        error_logger.log_error(f"Error creating team manager crew: {str(e)}", error_context)
        console.print(f"‚ùå Error creating team manager crew: {e}", style="red")
        return None

