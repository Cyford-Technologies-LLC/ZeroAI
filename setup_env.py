#!/usr/bin/env python3
"""
Environment Setup Helper

This script helps users set up their .env file with API keys.
"""

import os
from pathlib import Path
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.panel import Panel

console = Console()


def main():
    """Interactive .env file setup."""
    console.print("üîß [bold blue]Environment Setup Helper[/bold blue]")
    console.print("=" * 50)
    
    env_file = Path(".env")
    
    if env_file.exists():
        if not Confirm.ask("üìÑ .env file already exists. Overwrite?"):
            console.print("‚úÖ Keeping existing .env file")
            return
    
    console.print("\nüìù Let's set up your environment variables...")
    console.print("üí° Leave blank to skip optional cloud providers")
    
    # Collect environment variables
    env_vars = {}
    
    # Local settings
    console.print("\nüè† [bold]Local AI Settings[/bold]")
    env_vars["OLLAMA_BASE_URL"] = Prompt.ask(
        "Ollama server URL",

        default="http://ollama:11434"
    )
    env_vars["DEFAULT_MODEL"] = Prompt.ask(
        "Default model name", 
        default="mistral-nemo:latest"
    )
    
    # Cloud providers
    console.print("\n‚òÅÔ∏è  [bold]Cloud AI Providers (Optional)[/bold]")
    
    if Confirm.ask("ü§ñ Set up OpenAI?", default=False):
        env_vars["OPENAI_API_KEY"] = Prompt.ask(
            "OpenAI API Key",
            password=True
        )
    
    if Confirm.ask("üß† Set up Anthropic Claude?", default=False):
        env_vars["ANTHROPIC_API_KEY"] = Prompt.ask(
            "Anthropic API Key",
            password=True
        )
    
    if Confirm.ask("üåê Set up Azure OpenAI?", default=False):
        env_vars["AZURE_OPENAI_API_KEY"] = Prompt.ask(
            "Azure OpenAI API Key",
            password=True
        )
        env_vars["AZURE_OPENAI_ENDPOINT"] = Prompt.ask(
            "Azure OpenAI Endpoint"
        )
    
    if Confirm.ask("üîç Set up Google AI?", default=False):
        env_vars["GOOGLE_API_KEY"] = Prompt.ask(
            "Google API Key",
            password=True
        )
    
    # Application settings
    console.print("\n‚öôÔ∏è  [bold]Application Settings[/bold]")
    env_vars["LOG_LEVEL"] = Prompt.ask(
        "Log level", 
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        default="INFO"
    )
    env_vars["MAX_CONCURRENT_AGENTS"] = Prompt.ask(
        "Max concurrent agents", 
        default="3"
    )
    env_vars["AGENT_TIMEOUT"] = Prompt.ask(
        "Agent timeout (seconds)", 
        default="300"
    )
    
    # Write .env file
    with open(env_file, 'w') as f:
        f.write("# Self-Hosted Agentic AI Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")
        
        f.write("# ===== LOCAL AI SETTINGS =====\n")
        f.write(f"OLLAMA_BASE_URL={env_vars['OLLAMA_BASE_URL']}\n")
        f.write(f"DEFAULT_MODEL={env_vars['DEFAULT_MODEL']}\n\n")
        
        f.write("# ===== CLOUD AI PROVIDERS =====\n")
        for key in ["OPENAI_API_KEY", "ANTHROPIC_API_KEY", "AZURE_OPENAI_API_KEY", "AZURE_OPENAI_ENDPOINT", "GOOGLE_API_KEY"]:
            value = env_vars.get(key, "")
            f.write(f"{key}={value}\n")
        
        f.write("\n# ===== APPLICATION SETTINGS =====\n")
        f.write(f"LOG_LEVEL={env_vars['LOG_LEVEL']}\n")
        f.write(f"MAX_CONCURRENT_AGENTS={env_vars['MAX_CONCURRENT_AGENTS']}\n")
        f.write(f"AGENT_TIMEOUT={env_vars['AGENT_TIMEOUT']}\n")
    
    console.print(f"\n‚úÖ Environment file created: [bold green]{env_file}[/bold green]")
    
    # Show next steps
    panel_content = """üöÄ Next Steps:
1. Run: python examples/basic_crew.py
2. Try cloud integration: python examples/cloud_integration.py
3. Test hybrid deployment: python examples/hybrid_deployment.py"""
    
    console.print(Panel(panel_content, title="Setup Complete!", border_style="green"))


if __name__ == "__main__":
    main()